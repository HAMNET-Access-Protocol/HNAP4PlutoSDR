#!/bin/sh
#
# Start the network....
#

# Debian ifupdown needs the /run/network lock directory

source /etc/device_config

create_system_files () {

	UDHCPD_CONF=/etc/udhcpd.conf
	UDHCPD_CONF_TAP0=/etc/udhcpd_tap0.conf
	UDHCPD_CONF_ETH0=/etc/udhcpd_eth0.conf
	CONF=/opt/config.txt
	IFAC=/etc/network/interfaces

	HOSTNAME=`fw_printenv -n hostname 2> /dev/null || cat /etc/hostname`
	echo $HOSTNAME > /etc/hostname

	IPADDR=`fw_printenv -n ipaddr 2> /dev/null || echo 192.168.2.1`
	NETMASK=`fw_printenv -n netmask 2> /dev/null || echo 255.255.255.0`
	DHCP_SERVER_POOL_START=`fw_printenv -n dhcp_server_pool_start 2> /dev/null || echo 192.168.2.10`
	DHCP_SERVER_LEASETIME=`fw_printenv -n dhcp_server_leasetime 2> /dev/null || echo 600`
	DHCP_SERVER_GATEWAY=`fw_printenv -n dhcp_server_gateway 2> /dev/null || echo $IPADDR`
	DHCP_SERVER_DNS=`fw_printenv -n dhcp_server_dns 2> /dev/null || echo $IPADDR`

	WLAN_SSID=`fw_printenv -n ssid_wlan 2> /dev/null`
	WLAN_PWD=`fw_printenv -n pwd_wlan 2> /dev/null`
	WLAN_IPADDR=`fw_printenv -n ipaddr_wlan 2> /dev/null`

	ETH_IPADDR=`fw_printenv -n ipaddr_eth 2> /dev/null`
	ETH_NETMASK=`fw_printenv -n netmask_eth 2> /dev/null || echo 255.255.255.0`
	ETH_DHCP_SERVER_POOL_START=`fw_printenv -n dhcp_server_pool_start_eth 2> /dev/null`
	ETH_DHCP_SERVER_LEASETIME=`fw_printenv -n dhcp_server_leasetime_eth 2> /dev/null || echo 600`
	ETH_DHCP_SERVER_GATEWAY=`fw_printenv -n dhcp_server_gateway_eth 2> /dev/null || echo $ETH_IPADDR`
	ETH_DHCP_SERVER_DNS=`fw_printenv -n dhcp_server_dns_eth 2> /dev/null || echo $ETH_IPADDR`

	TAP_IPADDR=`fw_printenv -n ipaddr_tap 2> /dev/null`
	TAP_NETMASK=`fw_printenv -n netmask_tap 2> /dev/null || echo 255.255.255.240`
	TAP_DHCP_SERVER_POOL_START=`fw_printenv -n dhcp_server_pool_start_tap 2> /dev/null`
	TAP_DHCP_SERVER_LEASETIME=`fw_printenv -n dhcp_server_leasetime_tap 2> /dev/null || echo 600`
	TAP_DHCP_SERVER_GATEWAY=`fw_printenv -n dhcp_server_gateway_tap 2> /dev/null || echo $TAP_IPADDR`
	TAP_DHCP_SERVER_DNS=`fw_printenv -n dhcp_server_dns_tap 2> /dev/null || echo $TAP_IPADDR`

	NAT=`fw_printenv -n nat 2> /dev/null`
	WLAN_NAT=`fw_printenv -n nat_wlan 2> /dev/null`
	ETH_NAT=`fw_printenv -n nat_eth 2> /dev/null`
	TAP_NAT=`fw_printenv -n nat_tap 2> /dev/null`

	BRIDGE=`fw_printenv -n bridge 2> /dev/null`
	WLAN_BRIDGE=`fw_printenv -n bridge_wlan 2> /dev/null`
	ETH_BRIDGE=`fw_printenv -n bridge_eth 2> /dev/null`
	TAP_BRIDGE=`fw_printenv -n bridge_tap 2> /dev/null`

	XO_CORRECTION=`fw_printenv -n xo_correction 2> /dev/null`
	UDC_HANDLE_SUSPEND=`fw_printenv -n udc_handle_suspend 2> /dev/null || echo 0`

	### /etc/network/interfaces ###
	CREATE_BRIDGE=0

	echo -e "auto lo\n""iface lo inet loopback\n" > $IFAC

	### usb0
	if [ "$BRIDGE" == "master" ]
	then
		CREATE_BRIDGE=1
		BRIDGE_IPADDR=$IPADDR
		BRIDGE_NETMASK=$NETMASK
		BRIDGE_NAT=$NAT
	elif [ "$BRIDGE" != "slave" ]
	then
		echo -e "auto usb0\n""iface usb0 inet static" >> $IFAC
		echo -e "\taddress $IPADDR\n""\tnetmask $NETMASK" >> $IFAC
		if [ "$NAT" == "yes" ]
		then	
			echo -e "\tpre-up iptables -t nat -A POSTROUTING -o usb0 -j MASQUERADE" >> $IFAC
		fi
		echo -e "\n" >> $IFAC
	fi

	### /etc/udhcpd.conf ###
	echo "start $DHCP_SERVER_POOL_START" > $UDHCPD_CONF
	if [ "$BRIDGE" == "master" ]
	then
		echo "interface br0" >> $UDHCPD_CONF
	else
		echo "interface usb0" >> $UDHCPD_CONF
	fi
	echo "option subnet $NETMASK" >> $UDHCPD_CONF
	echo "option lease $DHCP_SERVER_LEASETIME" >> $UDHCPD_CONF
	echo "option router $DHCP_SERVER_GATEWAY" >> $UDHCPD_CONF
	echo "option dns $DHCP_SERVER_DNS" >> $UDHCPD_CONF

	### wlan0
	
	if [ -n "$WLAN_SSID" ]
	then
		### /etc/wpa.conf ###
		if [ -n "$WLAN_PWD" ]
		then
			wpa_passphrase $WLAN_SSID $WLAN_PWD > /etc/wpa.conf
		else
			echo "network={" > /etc/wpa.conf
			echo "    ssid=\"$WLAN_SSID\"" >> /etc/wpa.conf
			echo "    key_mgmt=NONE" >> /etc/wpa.conf
			echo "}" >> /etc/wpa.conf
		fi

		if [ "$WLAN_BRIDGE" == "master" ]
		then
			CREATE_BRIDGE=1
			BRIDGE_IPADDR=$WLAN_IPADDR
			BRIDGE_NETMASK="255.255.255.0"
			BRIDGE_NAT=$WLAN_NAT
		elif [ "$WLAN_BRIDGE" != "slave" ]
		then
			echo -e "auto wlan0" >> $IFAC

			if [ -n "$WLAN_IPADDR" ]
			then
				echo -e "iface wlan0 inet static" >> $IFAC
				echo -e "\taddress $WLAN_IPADDR\n""\tnetmask 255.255.255.0" >> $IFAC
			else
				echo -e "iface wlan0 inet dhcp" >> $IFAC
			fi
			echo -e "\twpa-conf /etc/wpa.conf" >> $IFAC
			if [ "$WLAN_NAT" == "yes" ]
			then	
				echo -e "\tpre-up iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE" >> $IFAC
			fi
			echo -e "\n" >> $IFAC
		fi
	fi

	### eth0
	if [ "$ETH_BRIDGE" == "master" ]
	then
		CREATE_BRIDGE=1
		BRIDGE_IPADDR=$ETH_IPADDR
		BRIDGE_NETMASK=$ETH_NETMASK
		BRIDGE_NAT=$ETH_NAT
	elif [ "$ETH_BRIDGE" != "slave" ]
	then
		echo -e "auto eth0" >> $IFAC
		if [ -n "$ETH_IPADDR" ]
		then
			echo -e "iface eth0 inet static" >> $IFAC
			echo -e "\taddress $ETH_IPADDR\n""\tnetmask $ETH_NETMASK" >> $IFAC
		else
			echo -e "iface eth0 inet dhcp" >> $IFAC
		fi
		if [ "$ETH_NAT" == "yes" ]
		then	
			echo -e "\tpre-up iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE" >> $IFAC
		fi
		echo -e "\n" >> $IFAC
	fi

	### /etc/udhcpd_eth0.conf ###
	if [ -n "$ETH_DHCP_SERVER_POOL_START" ]
	then
		echo "start $ETH_DHCP_SERVER_POOL_START" > $UDHCPD_CONF_ETH0
		if [ "$ETH_BRIDGE" == "master" ]
		then
			echo "interface br0" >> $UDHCPD_CONF_ETH0
		else
			echo "interface eth0" >> $UDHCPD_CONF_ETH0
		fi
		echo "option subnet $ETH_NETMASK" >> $UDHCPD_CONF_ETH0
		echo "option lease $ETH_DHCP_SERVER_LEASETIME" >> $UDHCPD_CONF_ETH0
		echo "option router $ETH_DHCP_SERVER_GATEWAY" >> $UDHCPD_CONF_ETH0
		echo "option dns $ETH_DHCP_SERVER_DNS" >> $UDHCPD_CONF_ETH0
	fi

	### tap0

	if [ "$TAP_BRIDGE" == "master" ]
	then
		CREATE_BRIDGE=1
		BRIDGE_IPADDR=$TAP_IPADDR
		BRIDGE_NETMASK=$TAP_NETMASK
		BRIDGE_NAT=$TAP_NAT
	elif [ "$TAP_BRIDGE" != "slave" ]
	then
		echo -e "auto tap0" >> $IFAC
		if [ -n "$TAP_IPADDR" ]
		then
			echo -e "iface tap0 inet static" >> $IFAC
			echo -e "\taddress $TAP_IPADDR\n""\tnetmask $TAP_NETMASK" >> $IFAC
		else
			echo -e "iface tap0 inet dhcp" >> $IFAC
		fi
		echo -e "\tpre-up tunctl -t tap0" >> $IFAC
		if [ "$TAP_NAT" == "yes" ]
		then	
			echo -e "\tpre-up iptables -t nat -A POSTROUTING -o tap0 -j MASQUERADE" >> $IFAC
		fi
		echo -e "\n" >> $IFAC
	fi

	### /etc/udhcpd_tap0.conf ###
	if [ -n "$TAP_DHCP_SERVER_POOL_START" ]
	then
		echo "start $TAP_DHCP_SERVER_POOL_START" > $UDHCPD_CONF_TAP0
		if [ "$TAP_BRIDGE" == "master" ]
		then
			echo "interface br0" >> $UDHCPD_CONF_TAP0
		else
			echo "interface tap0" >> $UDHCPD_CONF_TAP0
		fi
		echo "option subnet $TAP_NETMASK" >> $UDHCPD_CONF_TAP0
		echo "option lease $TAP_DHCP_SERVER_LEASETIME" >> $UDHCPD_CONF_TAP0
		echo "option router $TAP_DHCP_SERVER_GATEWAY" >> $UDHCPD_CONF_TAP0
		echo "option dns $TAP_DHCP_SERVER_DNS" >> $UDHCPD_CONF_TAP0
	fi

	### br0

	if [ "$CREATE_BRIDGE" == 1 ]
	then
		echo -e "auto br0" >> $IFAC

		if [ -n "$BRIDGE_IPADDR" ]
		then
			echo -e "iface br0 inet static" >> $IFAC
			echo -e "\taddress $BRIDGE_IPADDR\n""\tnetmask $BRIDGE_NETMASK" >> $IFAC
		else
			echo -e "iface br0 inet dhcp" >> $IFAC
		fi

		## If tap0 is on bridge, bring it up
		if [ "$TAP_BRIDGE" == "master" ] || [ "$TAP_BRIDGE" == "slave" ]
		then
			echo -e "\tpre-up tunctl -t tap0" >> $IFAC
		fi

		echo -e "\tpre-up brctl addbr br0" >> $IFAC

		# Add slave interfaces
		if [ "$BRIDGE" == "master" ] || [ "$BRIDGE" == "slave" ]
		then
			echo -e "\tpre-up brctl addif br0 usb0" >> $IFAC
		fi
		if [ "$WLAN_BRIDGE" == "master" ] || [ "$WLAN_BRIDGE" == "slave" ]
		then
			echo -e "\tpre-up brctl addif br0 wlan0" >> $IFAC
		fi
		if [ "$ETH_BRIDGE" == "master" ] || [ "$ETH_BRIDGE" == "slave" ]
		then
			echo -e "\tpre-up brctl addif br0 eth0" >> $IFAC
		fi
		if [ "$TAP_BRIDGE" == "master" ] || [ "$TAP_BRIDGE" == "slave" ]
		then
			echo -e "\tpre-up brctl addif br0 tap0" >> $IFAC
		fi

		# Set up NAT, if desired
		if [ "$BRIDGE_NAT" == "yes" ]
		then	
			echo -e "\tpre-up iptables -t nat -A POSTROUTING -o br0 -j MASQUERADE" >> $IFAC
		fi
	fi

	### /opt/config.txt ###
	echo "# $(cat /sys/firmware/devicetree/base/model | tr / -)"$'\r' > $CONF
	echo "# Device Configuration File"$'\r' >> $CONF
	echo "#   1. Open with an Editor"$'\r' >> $CONF
	echo "#   2. Edit this file"$'\r' >> $CONF
	echo "#   3. Save this file on the device USB drive"$'\r' >> $CONF
	echo "#   4. Eject the device USB Drive"$'\r' >> $CONF
	echo "# Doc: https://wiki.analog.com/university/tools/pluto/users/customizing"$'\r' >> $CONF
	echo "#      https://manual.hnap.de"$'\r' >> $CONF
	echo ""$'\r'>> $CONF

	echo "[NETWORK]"$'\r' >> $CONF
	echo "hostname = $HOSTNAME"$'\r' >> $CONF
	echo "ipaddr = $IPADDR"$'\r' >> $CONF
	echo "netmask = $NETMASK"$'\r' >> $CONF
	echo "nat = $NAT"$'\r' >> $CONF
	echo "bridge = $BRIDGE"$'\r' >> $CONF
	echo "dhcp_server_pool_start = $DHCP_SERVER_POOL_START"$'\r' >> $CONF
	echo "dhcp_server_leasetime = $DHCP_SERVER_LEASETIME"$'\r' >> $CONF
	echo "dhcp_server_gateway = $DHCP_SERVER_GATEWAY"$'\r' >> $CONF
	echo "dhcp_server_dns = $DHCP_SERVER_DNS"$'\r' >> $CONF
	echo ""$'\r'>> $CONF

	echo "[WLAN]"$'\r' >> $CONF
	echo "ssid_wlan = $WLAN_SSID"$'\r' >> $CONF
	echo "pwd_wlan = $WLAN_PWD"$'\r' >> $CONF
	echo "ipaddr_wlan = $WLAN_IPADDR"$'\r' >> $CONF
	echo "nat_wlan = $WLAN_NAT"$'\r' >> $CONF
	echo "bridge_wlan = $WLAN_BRIDGE"$'\r' >> $CONF
	echo ""$'\r'>> $CONF

	echo "[USB_ETHERNET]"$'\r' >> $CONF
	echo "ipaddr_eth = $ETH_IPADDR"$'\r' >> $CONF
	echo "netmask_eth = $ETH_NETMASK"$'\r' >> $CONF
	echo "nat_eth = $ETH_NAT"$'\r' >> $CONF
	echo "bridge_eth = $ETH_BRIDGE"$'\r' >> $CONF
	echo "dhcp_server_pool_start_eth = $ETH_DHCP_SERVER_POOL_START"$'\r' >> $CONF
	echo "dhcp_server_leasetime_eth = $ETH_DHCP_SERVER_LEASETIME"$'\r' >> $CONF
	echo "dhcp_server_gateway_eth = $ETH_DHCP_SERVER_GATEWAY"$'\r' >> $CONF
	echo "dhcp_server_dns_eth = $ETH_DHCP_SERVER_DNS"$'\r' >> $CONF
	echo ""$'\r'>> $CONF

	echo "[HNAP_NETWORK]"$'\r' >> $CONF
	echo "ipaddr_tap = $TAP_IPADDR"$'\r' >> $CONF
	echo "netmask_tap = $TAP_NETMASK"$'\r' >> $CONF
	echo "nat_tap = $TAP_NAT"$'\r' >> $CONF
	echo "bridge_tap = $TAP_BRIDGE"$'\r' >> $CONF
	echo "dhcp_server_pool_start_tap = $TAP_DHCP_SERVER_POOL_START"$'\r' >> $CONF
	echo "dhcp_server_leasetime_tap = $TAP_DHCP_SERVER_LEASETIME"$'\r' >> $CONF
	echo "dhcp_server_gateway_tap = $TAP_DHCP_SERVER_GATEWAY"$'\r' >> $CONF
	echo "dhcp_server_dns_tap = $TAP_DHCP_SERVER_DNS"$'\r' >> $CONF
	echo ""$'\r'>> $CONF

	echo "[SYSTEM]"$'\r' >> $CONF
	echo "xo_correction = $XO_CORRECTION"$'\r' >> $CONF
	echo "udc_handle_suspend = $UDC_HANDLE_SUSPEND"$'\r' >> $CONF
	echo ""$'\r'>> $CONF

	echo "[ACTIONS]"$'\r' >> $CONF
	echo "diagnostic_report = 0"$'\r' >> $CONF
	echo "dfu = 0"$'\r' >> $CONF
	echo "reset = 0"$'\r' >> $CONF
	echo "calibrate = 0"$'\r' >> $CONF
	echo ""$'\r'>> $CONF

	### /www/index.html ###

	sed -i -e "s/#IP#/$IPADDR/g" -e "s/#HOSTIP#/$IPADDR_HOST/g" -e "s/#NETMASK#/$NETMASK/g" -e "s/#HOSTNAME#/$HOSTNAME/g" -e "s/#SSID_WLAN#/$WLAN_SSID/g" -e "s/#IPADDR_WLAN#/$WLAN_IPADDR/g" -e "s/#IPADDR_ETH#/$ETH_IPADDR/g" -e "s/#NETMASK_ETH#/$ETH_NETMASK/g" /www/index.html

	}

mkdir -p /run/network

case "$1" in
  start)
	create_system_files
	printf "Starting network: "
	/bin/hostname -F /etc/hostname
	/sbin/ifup -a 2>&1 | logger
	[ $? = 0 ] && echo "OK" || echo "FAIL"
	;;
  stop)
	printf "Stopping network: "
	/sbin/ifdown -a
	[ $? = 0 ] && echo "OK" || echo "FAIL"
	;;
  restart|reload)
	"$0" stop
	"$0" start
	;;
  *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
esac

exit $?
